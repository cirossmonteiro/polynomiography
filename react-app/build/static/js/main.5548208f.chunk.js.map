{"version":3,"sources":["utils.tsx","App.tsx","complex.tsx","matrix.tsx","polynomial.tsx","graphics.tsx","serviceWorker.js","index.js"],"names":["zeros","num","Array","from","handleChange","event","scope","safeName","target","name","safeValue","value","setState","Object","_home_hayek_github_repos_polynomiography_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","App","props","_this","_home_hayek_github_repos_polynomiography_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_hayek_github_repos_polynomiography_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_hayek_github_repos_polynomiography_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","updateGraphics","_this$state","state","poly","axis","thickness","dimensions","poly2","eval","axis2","thickness2","dimensions2","_this2","_this$state2","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onChange","e","type","min","max","onClick","_graphics__WEBPACK_IMPORTED_MODULE_7__","polynomial","width","height","React","Component","Complex","b","classCallCheck","norm","Math","sqrt","pow","conjugate","inverse","print","str","rgb","complexSum","x","y","complexProduct","complexIntPow","n","z","k","Matrix","m","arguments","length","undefined","matrix","setArray","mat","slice","map","row","set","i","j","get","subMatrix","ret","filter","v","ind","matrixSum","m1","m2","matrixScalar","matrixProduct","TypeError","concat","matrixIntPow","matrixId","Polynomial","arr","coefficients","compute","g","c","mon","MatrixZero","mono","derivate","pop","reduce","ac","now","Graphics","possibleConstructorReturn","getPrototypeOf","canvasRef","drawPolynomial","p","_this$props","delta","current","ctx","getContext","imgData","createImageData","dx","dy","color","k1","k2","data","putImageData","basicDraw","_this$props2","createRef","prevProps","prevState","snapshot","_this$props3","_this$props4","react_default","style","border","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5548208f.chunk.js","sourcesContent":["export const zeros = (num: number) => Array.from(Array(num),() => 0);\n\n\n// source: https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\nexport const RGB2HSL = (r: number, g: number, b: number) => {\n    r /= 255, g /= 255, b /= 255;\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h = 0, s = 0, l = (max + min) / 2;\n\n    /* if(max == min)\n        h = s = 0; // achromatic */\n    if (max != min) {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max){\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h /= 6;\n    }\n\n    return [h, s, l];\n};\n\nexport const HUE2RGB = (p: number, q: number, t: number) => {\n    if(t < 0) t += 1;\n    if(t > 1) t -= 1;\n    if(t < 1/6) return p + (q - p) * 6 * t;\n    if(t < 1/2) return q;\n    if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n};\n\nexport const HSL2RGB = (h: number, s: number, l: number) => {\n    var r = l, g = l, b = l;\n\n    /* if(s == 0){\n        r = g = b = l; // achromatic */\n    if (s != 0){\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = HUE2RGB(p, q, h + 1/3);\n        g = HUE2RGB(p, q, h);\n        b = HUE2RGB(p, q, h - 1/3);\n    }\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n\nexport interface IEvent {\n    target: { \n        name: string,\n        value: string\n    }\n};\n\nexport const handleChange = (event: IEvent, scope: any) => {\n    let safeName: string = event.target.name;\n    let safeValue: string = event.target.value;\n    scope.setState({[safeName]: safeValue});\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Matrix, matrixPrint, matrixSum, matrixProduct, matrixIntPow } from './matrix';\nimport { Complex } from './complex';\nimport { Polynomial } from './polynomial';\nimport Graphics from './graphics';\nimport { handleChange } from './utils';\nimport { number, string } from 'prop-types';\n\ninterface IProps {\n\n}\n\ninterface IState {\n    poly: string,\n    poly2: number[],\n    axis: string,\n    axis2: [number, number, number, number],\n    thickness: number,\n    thickness2: number,\n    dimensions: string,\n    dimensions2: [number, number]\n}\n\nclass App extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            poly: \"[1,0]\",\n            poly2: [1,0],\n            axis: \"[-1,1,-1,1]\",\n            axis2: [-1,1,-1,1],\n            thickness: 1,\n            thickness2: 1,\n            dimensions: \"[400,400]\",\n            dimensions2: [400,400]\n        }\n    }\n\n    updateGraphics = () => {\n        const { poly, axis, thickness, dimensions } = this.state;\n        this.setState({\n            poly2: eval(poly),\n            axis2: eval(axis),\n            thickness2: thickness,\n            dimensions2: eval(dimensions)\n        });\n    }\n\n    render(){\n        const { poly, poly2, axis, axis2, thickness, thickness2, dimensions, dimensions2 } = this.state;\n        return (\n            <div className=\"App\">\n                <div>\n                    Only real numbers, please. Increasing thickness increase the size of points, but computing the same values.\n                </div>\n                Polynomial coefficients <input name = \"poly\" value={poly} onChange = {e => handleChange(e, this)} />\n                [xmin, xmax, ymin, ymax] <input name = \"axis\" value={axis} onChange = {e => handleChange(e, this)} />\n                [width, height] <input name = \"dimensions\" value={dimensions} onChange = {e => handleChange(e, this)} />\n                Thickness (point) <input name = \"thickness\" type = \"number\" min=\"1\" max=\"2\" value={thickness} onChange = {e => handleChange(e, this)} />\n                <button onClick = {this.updateGraphics}>update canvas</button>\n                <Graphics polynomial = {poly2} axis = {axis2} thickness = {thickness2} width = {dimensions2[0]} height = {dimensions2[0]} />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","import { zeros } from \"./utils\";\n\nexport class Complex {\n\n    name: string = 'Complex';\n    b: number;\n    a: number;\n\n    constructor(a: number, b: number) {\n        this.a = a;\n        this.b = b;\n    }\n\n    norm = () => Math.sqrt(this.a**2+this.b**2);\n\n    conjugate = () => new Complex(this.a, -this.b);\n\n    inverse = () => new Complex(this.a/(this.a**2+this.b**2), -this.b/(this.a**2+this.b**2));\n\n    print = () => {\n        let str = \"\";\n        if (this.a != 0)\n            str += this.a;\n        if (this.b != 0) {\n            if (this.a && this.b > 0)\n                str += ' + ';\n            str += this.b + 'i';\n        }\n        if (str == \"\")\n            str = \"0\"\n        return str;\n    }\n\n    // a,b are scaling parameters\n    //rgb = (a = 10, b = 10) => [this.a/a+a/2, this.b/b+b/2, 100];\n    rgb = (a: number, b: number) => [this.a*a, 0, this.b*b];\n\n};\n\nexport const one = new Complex(1,0);\n\nexport const zero = new Complex(0,0);\n\nexport const complexSum = (x: Complex, y: Complex) => new Complex(x.a+y.a, x.b+y.b);\n\nexport const complexProduct = (x: Complex, y: Complex) => new Complex(x.a*y.a-x.b*y.b, x.b*y.a+x.a*y.b);\n\nexport const complexDivision = (x: Complex, y: Complex) => complexProduct(x, y.inverse());\n\nexport const complexSub = (x: Complex, y: Complex) =>\n    complexSum(x, complexProduct(y, new Complex(-1,0)));\n\nexport const complexIntPow = (x: Complex, n: number) => {\n    if (x.a == 0 && x.b == 0)\n        return x;\n    if(n == 0)\n        return new Complex(1,0);\n    let z = x;\n    for(let k = 1; k < n; k++)\n        z = complexProduct(z, x);\n    return z;\n};","import React from 'react';\nimport { Complex, complexSum, complexProduct } from \"./complex\";\nimport { zeros } from \"./utils\";\n\nexport class Matrix {\n\n    name: string = 'Matrix';\n    matrix: any[][];\n    m: number;\n    n: number;\n\n    constructor(type: string, m: number, n: number = -1) {\n        if (n == -1)\n            n = m;\n        this.m = m;\n        this.n = n;\n        if (type == 'Complex')\n            this.matrix = zeros(m).map(() => zeros(n).map(() => new Complex(0,0)));\n        else\n            this.matrix = zeros(m).map(() => zeros(n));\n    }\n\n    setArray = (mat: any[][]) => {\n        this.m = mat.length;\n        this.n = mat[0].length;\n        return this.matrix = mat.slice(0).map(row => row.slice(0));\n    }\n\n    set = (i: number, j: number, e: any) => this.matrix[i][j] = e;\n\n    get = (i: number, j: number) => this.matrix[i][j];\n\n    subMatrix = (i: number, j: number) => {\n        let ret = new Matrix(this.matrix[0][0].name, this.m);\n        ret.matrix = this.matrix\n        .map(row => row.filter((v, ind) => ind != j))\n        .filter((v,ind) => ind != i);\n        return ret;\n    }\n\n};\n\nexport const determinant = (m1: Matrix) => {\n    if (m1.m == 1)\n        return m1.get(0,0);\n    let s = new Complex(0,0);\n    for (let ind = 0; ind < m1.m; ind++) {\n        const subm = m1.subMatrix(0, ind);\n        const detm = determinant(subm);\n        s = complexSum(s, complexProduct(complexProduct(detm,m1.get(0,ind)),new Complex((-1)**ind,0)))\n    }\n}\n    /* (m1.m == 1 ? m1.get(0,0) : \n        m1.matrix[0].reduce(\n            (ac, v, ind) => complexProduct(complexProduct(determinant(m1.subMatrix(0, ind)),v),(-1)**ind),\n        0)\n    ); */\n\nexport const MatrixZero = (type: string, n: number) => {\n    let matrix = new Matrix(type, n,n);\n    if (type == 'Complex')\n        for (let k = 0; k < n; k++)\n            matrix.matrix[k][k] = new Complex(0,0);\n    return matrix;\n}\n\nexport const matrixId = (type: string, n: number) => {\n    let matrix = new Matrix(type, n,n);\n    if (type == 'Complex')\n        for (let k = 0; k < n; k++)\n            matrix.matrix[k][k] = new Complex(1,0);\n    return matrix;\n}\n\nexport const matrixSum = (m1: Matrix, m2: Matrix) => {\n    const type = m1.matrix[0][0].name;\n    let matrix = new Matrix(type, m1.m, m1.n);\n    for (let i = 0; i < m1.m; i++)\n        for (let j = 0; j < m1.n; j++)\n            if (type == 'Complex')\n                matrix.matrix[i][j] = complexSum(m1.matrix[i][j],m2.matrix[i][j]);\n    return matrix;\n};\n\nexport const matrixScalar = (m1: Matrix, z: Complex) => {\n    const type = m1.matrix[0][0].name;\n    let matrix = new Matrix(type, m1.m, m1.n);\n    for (let i = 0; i < m1.m; i++)\n        for (let j = 0; j < m1.n; j++)\n            if (type == 'Complex')\n                matrix.matrix[i][j] = complexProduct(m1.matrix[i][j], z);\n    return matrix;\n};\n\nexport const matrixSub = (m1: Matrix, m2: Matrix) => {\n    const type = m1.matrix[0][0].name;\n    if (type == 'Complex')\n        return matrixSum(m1, matrixScalar(m2, new Complex(-1, 0)));\n}\n\nexport const matrixProduct = (m1: Matrix, m2: Matrix) => {\n    if (m1.n != m2.m)\n        throw TypeError(`Matrices product can't be computed because of its dimensions: ${m1.n} != ${m2.m}.`);\n    const type = m1.matrix[0][0].name;\n    let matrix = new Matrix(type, m1.m, m2.n);\n    for (let i = 0; i < m1.m; i++)\n        for (let j = 0; j < m2.n; j++)\n            for (let k = 0; k < m1.n; k++)\n                if (type == 'Complex')\n                    matrix.matrix[i][j] = complexSum(matrix.matrix[i][j],\n                        complexProduct(m1.matrix[i][k],m2.matrix[k][j]));\n    return matrix;\n};\n\nexport const matrixIntPow = (m1: Matrix, n: number) => {\n    if (m1.m != m1.n)\n        throw new TypeError(`Matrix power can't be computed because of its dimensions: ${m1.m} != ${m1.n}.`);\n    const type = m1.matrix[0][0].name;\n    let matrix = matrixId(type, m1.m);\n    for (let k = 0; k < n; k++)\n        matrix = matrixProduct(matrix, m1);\n    return matrix;\n};\n\nexport const matrixPrint = (m1: Matrix): JSX.Element => {\n    const type = m1.matrix[0][0].name;\n    return (\n        <div className = \"matrix-body\">\n            {m1.matrix.map(row =>\n                <div className = \"matrix-row\">\n                    {row.map(cell => <div className = \"matrix-cell\">{cell.print()}</div>)}\n                </div>\n            )}\n        </div>\n    )\n}","import { Complex, complexProduct, complexIntPow, complexSum } from \"./complex\";\nimport { MatrixZero, matrixIntPow, matrixProduct, matrixSum, matrixScalar } from \"./matrix\";\n\nexport class Polynomial {\n\n    coefficients: Complex[];\n\n    constructor(arr: Complex[]) {\n        this.coefficients = arr.slice(0);\n    }\n\n    compute = (x: any) => {\n        const g = this.coefficients.length-1;\n        //const type = this.coefficients[0].name;\n        const type = x.name;\n        if (type == 'Complex') {\n            let z = new Complex(0,0);\n            for (let i = 0; i <= g; i++) {\n                const c = this.coefficients[i];\n                const mon = complexIntPow(x, g-i);\n                z = complexSum(z, complexProduct(c, mon));\n            }\n            return z;\n        }\n        if (type == 'Matrix') {\n            if (x.m != x.m)\n                throw new TypeError(\"Matrix power can't be computed because of its dimensions.\");\n            const type2 = x.matrix[0][0].name;\n            let z = MatrixZero(type2, x.m);\n            for (let i = 0; i <= g; i++) {\n                const c = this.coefficients[i];\n                const mono = matrixIntPow(x, g-i);\n                z = matrixSum(z, matrixScalar(mono, c));\n            }\n            return z;\n        }\n        return null;\n    }\n\n    derivate = () => {\n        let v = this.coefficients.slice(0);\n        const g = v.length-1;\n        v.pop();\n        v = v.map((e,i) => complexProduct(e, new Complex(g-i,0)));\n        return new Polynomial(v);\n    }\n    \n    print = () => {\n        let g = this.coefficients.length-1;\n        return this.coefficients.map((c,i) => `${c.print()}x^${g-i}`).reduce((ac, now) => ac+'+'+now,'');\n    }\n\n};","import React from 'react';\nimport { Polynomial } from './polynomial';\nimport { Complex, one, zero } from './complex';\n\ninterface IProps {\n    width: number,\n    height: number,\n    polynomial: number[],\n    axis: [number, number, number, number],\n    thickness: number\n}\n\ninterface IState {\n\n}\n\nclass Graphics extends React.Component<IProps, IState> {\n\n    private canvasRef: React.RefObject<HTMLCanvasElement>;\n\n    constructor(props: IProps) {\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n/*     draw = () => {\n        const { width, height, delta } = this;\n        const \n        if (!this.canvasRef.current)\n            return;\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n        if (!ctx)\n            return;\n        var imgData = ctx.createImageData(width*delta, height*delta);\n        var i;\n        for (i = 0; i < imgData.data.length; i += 4) {\n            const k = i/4, x = k/this.width, y = k%this.height;\n            imgData.data[i+0] = x*255/this.width; // red\n            imgData.data[i+1] = y*255/this.height; // green\n            imgData.data[i+2] = 100; // blue\n            imgData.data[i+3] = 255; // alpha\n        }\n        ctx.putImageData(imgData,0,0);\n    }\n */\n    drawPolynomial = (p: Polynomial, axis: [number, number, number, number], thickness: number) => {\n        const { width, height} = this.props;\n        const delta = thickness;\n        if (!this.canvasRef.current)\n            return;\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n        if (!ctx)\n            return;\n        var imgData = ctx.createImageData(width*delta, height*delta);\n        const dx = (axis[1]-axis[0])/width, dy = (axis[3]-axis[2])/height;\n        for (let i = 0; i < width; i++)\n            for (let j = 0; j < height; j++) {\n                const x = dx*i, y = dy*j;\n                const z = new Complex(x,y), fz = p.compute(z) as Complex;\n                const color = fz.rgb(200,200);\n                for (let k1 = 0; k1 < delta; k1++)\n                    for (let k2 = 0; k2 < delta; k2++) {\n                        //const ind = 4*((i+k1)*width*delta+(j+k2));\n                        const ind = 4*((i*delta+k1)*width*delta+(j*delta+k2));\n                        imgData.data[ind+0] = color[0];\n                        imgData.data[ind+1] = color[1];\n                        imgData.data[ind+2] = color[2];\n                        imgData.data[ind+3] = 255;\n                    }\n            }\n        /* var i;\n        for (i = 0; i < imgData.data.length; i += 4) {\n            const k = i/4, x = Math.floor(k/this.width), y = k%this.height;\n            const z = new Complex(x,y), fz = p.compute(z) as Complex;\n            console.log(53, i, z.print(), fz.print());\n            const color = fz.rgb();\n            imgData.data[i+0] = color[0];\n            imgData.data[i+1] = color[1];\n            imgData.data[i+2] = color[2];\n            imgData.data[i+3] = 255;\n        } */\n        ctx.putImageData(imgData,0,0);\n    }\n\n    basicDraw = () => {\n        const { polynomial, axis, thickness } = this.props;\n        this.drawPolynomial(new Polynomial(polynomial.map(x => new Complex(x,0))), axis, thickness);\n    }\n\n    componentDidMount() {\n        //this.draw();\n        this.basicDraw();\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any, snapshot: any) {\n        const { polynomial, axis, thickness } = this.props;\n        if(polynomial != prevProps.polynomial ||\n            axis != prevProps.axis ||\n            thickness != prevProps.thickness)\n            this.basicDraw();\n\n    }\n\n    render() {\n        const { width, height, thickness } = this.props;\n        return (\n            <div>\n                <canvas style={{border: \"1px solid black\"}} ref={this.canvasRef} width={width*thickness} height={height*thickness} />\n            </div>\n        )\n    };\n}\n\nexport default Graphics;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}